///
/// AmbientOcclusionOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `QualityLevel` to properly resolve imports.
namespace margelo::nitro::RNF { enum class QualityLevel; }

#include <optional>
#include "QualityLevel.hpp"

namespace margelo::nitro::RNF {

  /**
   * A struct which can be represented as a JavaScript object (AmbientOcclusionOptions).
   */
  struct AmbientOcclusionOptions {
  public:
    std::optional<double> radius     SWIFT_PRIVATE;
    std::optional<double> power     SWIFT_PRIVATE;
    std::optional<double> bias     SWIFT_PRIVATE;
    std::optional<double> resolution     SWIFT_PRIVATE;
    std::optional<double> intensity     SWIFT_PRIVATE;
    std::optional<double> bilateralThreshold     SWIFT_PRIVATE;
    std::optional<QualityLevel> quality     SWIFT_PRIVATE;
    std::optional<QualityLevel> lowPassFilter     SWIFT_PRIVATE;
    std::optional<QualityLevel> upsampling     SWIFT_PRIVATE;
    std::optional<bool> enabled     SWIFT_PRIVATE;
    std::optional<bool> bentNormals     SWIFT_PRIVATE;
    std::optional<double> minHorizonAngleRad     SWIFT_PRIVATE;

  public:
    explicit AmbientOcclusionOptions(std::optional<double> radius, std::optional<double> power, std::optional<double> bias, std::optional<double> resolution, std::optional<double> intensity, std::optional<double> bilateralThreshold, std::optional<QualityLevel> quality, std::optional<QualityLevel> lowPassFilter, std::optional<QualityLevel> upsampling, std::optional<bool> enabled, std::optional<bool> bentNormals, std::optional<double> minHorizonAngleRad): radius(radius), power(power), bias(bias), resolution(resolution), intensity(intensity), bilateralThreshold(bilateralThreshold), quality(quality), lowPassFilter(lowPassFilter), upsampling(upsampling), enabled(enabled), bentNormals(bentNormals), minHorizonAngleRad(minHorizonAngleRad) {}
  };

} // namespace margelo::nitro::RNF

namespace margelo::nitro {

  using namespace margelo::nitro::RNF;

  // C++ AmbientOcclusionOptions <> JS AmbientOcclusionOptions (object)
  template <>
  struct JSIConverter<AmbientOcclusionOptions> {
    static inline AmbientOcclusionOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return AmbientOcclusionOptions(
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "radius")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "power")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "bias")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "resolution")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "intensity")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "bilateralThreshold")),
        JSIConverter<std::optional<QualityLevel>>::fromJSI(runtime, obj.getProperty(runtime, "quality")),
        JSIConverter<std::optional<QualityLevel>>::fromJSI(runtime, obj.getProperty(runtime, "lowPassFilter")),
        JSIConverter<std::optional<QualityLevel>>::fromJSI(runtime, obj.getProperty(runtime, "upsampling")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "enabled")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "bentNormals")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "minHorizonAngleRad"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const AmbientOcclusionOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "radius", JSIConverter<std::optional<double>>::toJSI(runtime, arg.radius));
      obj.setProperty(runtime, "power", JSIConverter<std::optional<double>>::toJSI(runtime, arg.power));
      obj.setProperty(runtime, "bias", JSIConverter<std::optional<double>>::toJSI(runtime, arg.bias));
      obj.setProperty(runtime, "resolution", JSIConverter<std::optional<double>>::toJSI(runtime, arg.resolution));
      obj.setProperty(runtime, "intensity", JSIConverter<std::optional<double>>::toJSI(runtime, arg.intensity));
      obj.setProperty(runtime, "bilateralThreshold", JSIConverter<std::optional<double>>::toJSI(runtime, arg.bilateralThreshold));
      obj.setProperty(runtime, "quality", JSIConverter<std::optional<QualityLevel>>::toJSI(runtime, arg.quality));
      obj.setProperty(runtime, "lowPassFilter", JSIConverter<std::optional<QualityLevel>>::toJSI(runtime, arg.lowPassFilter));
      obj.setProperty(runtime, "upsampling", JSIConverter<std::optional<QualityLevel>>::toJSI(runtime, arg.upsampling));
      obj.setProperty(runtime, "enabled", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.enabled));
      obj.setProperty(runtime, "bentNormals", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.bentNormals));
      obj.setProperty(runtime, "minHorizonAngleRad", JSIConverter<std::optional<double>>::toJSI(runtime, arg.minHorizonAngleRad));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "radius"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "power"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "bias"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "resolution"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "intensity"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "bilateralThreshold"))) return false;
      if (!JSIConverter<std::optional<QualityLevel>>::canConvert(runtime, obj.getProperty(runtime, "quality"))) return false;
      if (!JSIConverter<std::optional<QualityLevel>>::canConvert(runtime, obj.getProperty(runtime, "lowPassFilter"))) return false;
      if (!JSIConverter<std::optional<QualityLevel>>::canConvert(runtime, obj.getProperty(runtime, "upsampling"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "enabled"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "bentNormals"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "minHorizonAngleRad"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
