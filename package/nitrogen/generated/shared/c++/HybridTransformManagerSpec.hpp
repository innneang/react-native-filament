///
/// HybridTransformManagerSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridMat4Spec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridMat4Spec; }
// Forward declaration of `HybridEntitySpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridEntitySpec; }
// Forward declaration of `HybridAABBSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridAABBSpec; }
// Forward declaration of `HybridRigidBodySpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridRigidBodySpec; }
// Forward declaration of `HybridPointerHolderSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridPointerHolderSpec; }

#include <memory>
#include "HybridMat4Spec.hpp"
#include "HybridEntitySpec.hpp"
#include "HybridAABBSpec.hpp"
#include <tuple>
#include "HybridRigidBodySpec.hpp"
#include <memory>
#include "HybridPointerHolderSpec.hpp"

namespace margelo::nitro::RNF {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `TransformManager`
   * Inherit this class to create instances of `HybridTransformManagerSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridTransformManager: public HybridTransformManagerSpec {
   * public:
   *   HybridTransformManager(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridTransformManagerSpec: public virtual HybridObject, public virtual HybridPointerHolderSpec {
    public:
      // Constructor
      explicit HybridTransformManagerSpec(): HybridObject(TAG) { }

      // Destructor
      virtual ~HybridTransformManagerSpec() { }

    public:
      // Properties
      

    public:
      // Methods
      virtual std::shared_ptr<margelo::nitro::RNF::HybridMat4Spec> getTransform(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entity) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridMat4Spec> getWorldTransform(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entity) = 0;
      virtual void openLocalTransformTransaction() = 0;
      virtual void commitLocalTransformTransaction() = 0;
      virtual void setTransform(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entity, const std::shared_ptr<margelo::nitro::RNF::HybridMat4Spec>& transform) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridMat4Spec> createIdentityMatrix() = 0;
      virtual void transformToUnitCube(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& rootEntity, const std::shared_ptr<margelo::nitro::RNF::HybridAABBSpec>& boundingBox) = 0;
      virtual void setEntityPosition(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entity, const std::tuple<double, double, double>& position, bool multiplyCurrent) = 0;
      virtual void setEntityRotation(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entity, double angleRadians, const std::tuple<double, double, double>& axis, bool multiplyCurrent) = 0;
      virtual void setEntityScale(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entity, const std::tuple<double, double, double>& scale, bool multiplyCurrent) = 0;
      virtual void updateTransformByRigidBody(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entity, const std::shared_ptr<margelo::nitro::RNF::HybridRigidBodySpec>& rigidBody) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "TransformManager";
  };

} // namespace margelo::nitro::RNF
