///
/// DynamicResolutionOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `QualityLevel` to properly resolve imports.
namespace margelo::nitro::RNF { enum class QualityLevel; }

#include <optional>
#include <tuple>
#include "QualityLevel.hpp"

namespace margelo::nitro::RNF {

  /**
   * A struct which can be represented as a JavaScript object (DynamicResolutionOptions).
   */
  struct DynamicResolutionOptions {
  public:
    std::optional<bool> enabled     SWIFT_PRIVATE;
    std::optional<bool> homogeneousScaling     SWIFT_PRIVATE;
    std::optional<std::tuple<double, double>> minScale     SWIFT_PRIVATE;
    std::optional<std::tuple<double, double>> maxScale     SWIFT_PRIVATE;
    std::optional<double> sharpness     SWIFT_PRIVATE;
    std::optional<QualityLevel> quality     SWIFT_PRIVATE;

  public:
    explicit DynamicResolutionOptions(std::optional<bool> enabled, std::optional<bool> homogeneousScaling, std::optional<std::tuple<double, double>> minScale, std::optional<std::tuple<double, double>> maxScale, std::optional<double> sharpness, std::optional<QualityLevel> quality): enabled(enabled), homogeneousScaling(homogeneousScaling), minScale(minScale), maxScale(maxScale), sharpness(sharpness), quality(quality) {}
  };

} // namespace margelo::nitro::RNF

namespace margelo::nitro {

  using namespace margelo::nitro::RNF;

  // C++ DynamicResolutionOptions <> JS DynamicResolutionOptions (object)
  template <>
  struct JSIConverter<DynamicResolutionOptions> {
    static inline DynamicResolutionOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return DynamicResolutionOptions(
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "enabled")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "homogeneousScaling")),
        JSIConverter<std::optional<std::tuple<double, double>>>::fromJSI(runtime, obj.getProperty(runtime, "minScale")),
        JSIConverter<std::optional<std::tuple<double, double>>>::fromJSI(runtime, obj.getProperty(runtime, "maxScale")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "sharpness")),
        JSIConverter<std::optional<QualityLevel>>::fromJSI(runtime, obj.getProperty(runtime, "quality"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const DynamicResolutionOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "enabled", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.enabled));
      obj.setProperty(runtime, "homogeneousScaling", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.homogeneousScaling));
      obj.setProperty(runtime, "minScale", JSIConverter<std::optional<std::tuple<double, double>>>::toJSI(runtime, arg.minScale));
      obj.setProperty(runtime, "maxScale", JSIConverter<std::optional<std::tuple<double, double>>>::toJSI(runtime, arg.maxScale));
      obj.setProperty(runtime, "sharpness", JSIConverter<std::optional<double>>::toJSI(runtime, arg.sharpness));
      obj.setProperty(runtime, "quality", JSIConverter<std::optional<QualityLevel>>::toJSI(runtime, arg.quality));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "enabled"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "homogeneousScaling"))) return false;
      if (!JSIConverter<std::optional<std::tuple<double, double>>>::canConvert(runtime, obj.getProperty(runtime, "minScale"))) return false;
      if (!JSIConverter<std::optional<std::tuple<double, double>>>::canConvert(runtime, obj.getProperty(runtime, "maxScale"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "sharpness"))) return false;
      if (!JSIConverter<std::optional<QualityLevel>>::canConvert(runtime, obj.getProperty(runtime, "quality"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
