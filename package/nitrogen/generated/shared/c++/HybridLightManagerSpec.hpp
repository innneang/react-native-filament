///
/// HybridLightManagerSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridEntitySpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridEntitySpec; }
// Forward declaration of `LightType` to properly resolve imports.
namespace margelo::nitro::RNF { enum class LightType; }
// Forward declaration of `HybridPointerHolderSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridPointerHolderSpec; }

#include <memory>
#include "HybridEntitySpec.hpp"
#include "LightType.hpp"
#include <optional>
#include <tuple>
#include <vector>
#include <memory>
#include "HybridPointerHolderSpec.hpp"

namespace margelo::nitro::RNF {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `LightManager`
   * Inherit this class to create instances of `HybridLightManagerSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridLightManager: public HybridLightManagerSpec {
   * public:
   *   HybridLightManager(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridLightManagerSpec: public virtual HybridObject, public virtual HybridPointerHolderSpec {
    public:
      // Constructor
      explicit HybridLightManagerSpec(): HybridObject(TAG) { }

      // Destructor
      virtual ~HybridLightManagerSpec() { }

    public:
      // Properties
      

    public:
      // Methods
      virtual std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec> createLightEntity(LightType type, std::optional<double> colorKelvin, std::optional<double> intensity, const std::optional<std::tuple<double, double, double>>& direction, const std::optional<std::tuple<double, double, double>>& position, std::optional<bool> castShadows, std::optional<double> falloffRadius, const std::optional<std::tuple<double, double>>& spotLightCone) = 0;
      virtual void destroy(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entityWrapper) = 0;
      virtual void setPosition(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entityWrapper, const std::vector<std::tuple<double, double, double>>& position) = 0;
      virtual std::vector<std::tuple<double, double, double>> getPosition(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entityWrapper) = 0;
      virtual void setDirection(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entityWrapper, const std::vector<std::tuple<double, double, double>>& direction) = 0;
      virtual std::vector<std::tuple<double, double, double>> getDirection(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entityWrapper) = 0;
      virtual void setColor(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entityWrapper, const std::vector<std::tuple<double, double, double>>& linearSRGBColor) = 0;
      virtual std::vector<std::tuple<double, double, double>> getColor(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entityWrapper) = 0;
      virtual void setIntensity(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entityWrapper, double intensity) = 0;
      virtual double getIntensity(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entityWrapper) = 0;
      virtual void setFalloff(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entityWrapper, double falloffRadius) = 0;
      virtual double getFalloff(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entityWrapper) = 0;
      virtual void setSpotLightCone(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entityWrapper, const std::tuple<double, double>& spotLightCone) = 0;
      virtual std::vector<std::tuple<double, double, double>> getSpotLightCone(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entityWrapper) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "LightManager";
  };

} // namespace margelo::nitro::RNF
