///
/// HybridTransformManagerSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "HybridTransformManagerSpec.hpp"

namespace margelo::nitro::RNF {

  void HybridTransformManagerSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    HybridPointerHolderSpec::loadHybridMethods();
    // load custom methods/properties
    registerHybrids(this, [](Prototype& prototype) {
      prototype.registerHybridMethod("getTransform", &HybridTransformManagerSpec::getTransform);
      prototype.registerHybridMethod("getWorldTransform", &HybridTransformManagerSpec::getWorldTransform);
      prototype.registerHybridMethod("openLocalTransformTransaction", &HybridTransformManagerSpec::openLocalTransformTransaction);
      prototype.registerHybridMethod("commitLocalTransformTransaction", &HybridTransformManagerSpec::commitLocalTransformTransaction);
      prototype.registerHybridMethod("setTransform", &HybridTransformManagerSpec::setTransform);
      prototype.registerHybridMethod("createIdentityMatrix", &HybridTransformManagerSpec::createIdentityMatrix);
      prototype.registerHybridMethod("transformToUnitCube", &HybridTransformManagerSpec::transformToUnitCube);
      prototype.registerHybridMethod("setEntityPosition", &HybridTransformManagerSpec::setEntityPosition);
      prototype.registerHybridMethod("setEntityRotation", &HybridTransformManagerSpec::setEntityRotation);
      prototype.registerHybridMethod("setEntityScale", &HybridTransformManagerSpec::setEntityScale);
      prototype.registerHybridMethod("updateTransformByRigidBody", &HybridTransformManagerSpec::updateTransformByRigidBody);
    });
  }

} // namespace margelo::nitro::RNF
