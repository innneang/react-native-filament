///
/// HybridMaterialSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridMaterialInstanceSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridMaterialInstanceSpec; }
// Forward declaration of `TextureInfo` to properly resolve imports.
namespace margelo::nitro::RNF { struct TextureInfo; }
// Forward declaration of `HybridRenderableManagerSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridRenderableManagerSpec; }
// Forward declaration of `HybridFilamentBufferSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridFilamentBufferSpec; }
// Forward declaration of `TextureFlags` to properly resolve imports.
namespace margelo::nitro::RNF { enum class TextureFlags; }
// Forward declaration of `HybridPointerHolderSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridPointerHolderSpec; }

#include <string>
#include <memory>
#include "HybridMaterialInstanceSpec.hpp"
#include "TextureInfo.hpp"
#include "HybridRenderableManagerSpec.hpp"
#include "HybridFilamentBufferSpec.hpp"
#include "TextureFlags.hpp"
#include <tuple>
#include <memory>
#include "HybridPointerHolderSpec.hpp"

namespace margelo::nitro::RNF {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `Material`
   * Inherit this class to create instances of `HybridMaterialSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridMaterial: public HybridMaterialSpec {
   * public:
   *   HybridMaterial(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridMaterialSpec: public virtual HybridObject, public virtual HybridPointerHolderSpec {
    public:
      // Constructor
      explicit HybridMaterialSpec(): HybridObject(TAG) { }

      // Destructor
      virtual ~HybridMaterialSpec() { }

    public:
      // Properties
      virtual std::string getName() = 0;

    public:
      // Methods
      virtual std::shared_ptr<margelo::nitro::RNF::HybridMaterialInstanceSpec> createInstance() = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridMaterialInstanceSpec> getDefaultInstance() = 0;
      virtual void setDefaultIntParameter(const std::string& name, double value) = 0;
      virtual void setDefaultFloatParameter(const std::string& name, double value) = 0;
      virtual TextureInfo setDefaultTextureParameter(const std::shared_ptr<margelo::nitro::RNF::HybridRenderableManagerSpec>& renderableManager, const std::string& name, const std::shared_ptr<margelo::nitro::RNF::HybridFilamentBufferSpec>& textureBuffer, TextureFlags textureFlags) = 0;
      virtual void setDefaultMat3fParameter(const std::string& name, const std::tuple<double, double, double, double, double, double, double, double, double>& value) = 0;
      virtual void setDefaultFloat3Parameter(const std::string& name, const std::tuple<double, double, double>& vector) = 0;
      virtual void setDefaultFloat4Parameter(const std::string& name, const std::tuple<double, double, double, double>& vector) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "Material";
  };

} // namespace margelo::nitro::RNF
