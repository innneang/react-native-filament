///
/// HybridTFilamentRecorderSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridListenerSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridListenerSpec; }

#include <string>
#include <future>
#include <memory>
#include "HybridListenerSpec.hpp"
#include <functional>

namespace margelo::nitro::RNF {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `TFilamentRecorder`
   * Inherit this class to create instances of `HybridTFilamentRecorderSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridTFilamentRecorder: public HybridTFilamentRecorderSpec {
   * public:
   *   HybridTFilamentRecorder(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridTFilamentRecorderSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridTFilamentRecorderSpec(): HybridObject(TAG) { }

      // Destructor
      virtual ~HybridTFilamentRecorderSpec() { }

    public:
      // Properties
      virtual double getWidth() = 0;
      virtual void setWidth(double width) = 0;
      virtual double getHeight() = 0;
      virtual void setHeight(double height) = 0;
      virtual double getFps() = 0;
      virtual void setFps(double fps) = 0;
      virtual std::string getOutputFile() = 0;
      virtual void setOutputFile(const std::string& outputFile) = 0;
      virtual bool getIsRecording() = 0;
      virtual void setIsRecording(bool isRecording) = 0;

    public:
      // Methods
      virtual std::future<void> startRecording() = 0;
      virtual std::future<std::string> stopRecording() = 0;
      virtual void renderFrame(double timestamp) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridListenerSpec> addOnReadyForMoreDataListener(const std::function<std::future<bool>()>& callback) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "TFilamentRecorder";
  };

} // namespace margelo::nitro::RNF
