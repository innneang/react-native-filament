///
/// OrbitCameraManipulatorConfig.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <optional>
#include <tuple>

namespace margelo::nitro::RNF {

  /**
   * A struct which can be represented as a JavaScript object (OrbitCameraManipulatorConfig).
   */
  struct OrbitCameraManipulatorConfig {
  public:
    std::optional<std::tuple<double, double, double>> orbitHomePosition     SWIFT_PRIVATE;
    std::optional<std::tuple<double, double, double>> targetPosition     SWIFT_PRIVATE;
    std::optional<std::tuple<double, double, double>> upVector     SWIFT_PRIVATE;
    std::optional<std::tuple<double>> zoomSpeed     SWIFT_PRIVATE;
    std::optional<std::tuple<double, double>> orbitSpeed     SWIFT_PRIVATE;

  public:
    explicit OrbitCameraManipulatorConfig(std::optional<std::tuple<double, double, double>> orbitHomePosition, std::optional<std::tuple<double, double, double>> targetPosition, std::optional<std::tuple<double, double, double>> upVector, std::optional<std::tuple<double>> zoomSpeed, std::optional<std::tuple<double, double>> orbitSpeed): orbitHomePosition(orbitHomePosition), targetPosition(targetPosition), upVector(upVector), zoomSpeed(zoomSpeed), orbitSpeed(orbitSpeed) {}
  };

} // namespace margelo::nitro::RNF

namespace margelo::nitro {

  using namespace margelo::nitro::RNF;

  // C++ OrbitCameraManipulatorConfig <> JS OrbitCameraManipulatorConfig (object)
  template <>
  struct JSIConverter<OrbitCameraManipulatorConfig> {
    static inline OrbitCameraManipulatorConfig fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return OrbitCameraManipulatorConfig(
        JSIConverter<std::optional<std::tuple<double, double, double>>>::fromJSI(runtime, obj.getProperty(runtime, "orbitHomePosition")),
        JSIConverter<std::optional<std::tuple<double, double, double>>>::fromJSI(runtime, obj.getProperty(runtime, "targetPosition")),
        JSIConverter<std::optional<std::tuple<double, double, double>>>::fromJSI(runtime, obj.getProperty(runtime, "upVector")),
        JSIConverter<std::optional<std::tuple<double>>>::fromJSI(runtime, obj.getProperty(runtime, "zoomSpeed")),
        JSIConverter<std::optional<std::tuple<double, double>>>::fromJSI(runtime, obj.getProperty(runtime, "orbitSpeed"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const OrbitCameraManipulatorConfig& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "orbitHomePosition", JSIConverter<std::optional<std::tuple<double, double, double>>>::toJSI(runtime, arg.orbitHomePosition));
      obj.setProperty(runtime, "targetPosition", JSIConverter<std::optional<std::tuple<double, double, double>>>::toJSI(runtime, arg.targetPosition));
      obj.setProperty(runtime, "upVector", JSIConverter<std::optional<std::tuple<double, double, double>>>::toJSI(runtime, arg.upVector));
      obj.setProperty(runtime, "zoomSpeed", JSIConverter<std::optional<std::tuple<double>>>::toJSI(runtime, arg.zoomSpeed));
      obj.setProperty(runtime, "orbitSpeed", JSIConverter<std::optional<std::tuple<double, double>>>::toJSI(runtime, arg.orbitSpeed));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<std::tuple<double, double, double>>>::canConvert(runtime, obj.getProperty(runtime, "orbitHomePosition"))) return false;
      if (!JSIConverter<std::optional<std::tuple<double, double, double>>>::canConvert(runtime, obj.getProperty(runtime, "targetPosition"))) return false;
      if (!JSIConverter<std::optional<std::tuple<double, double, double>>>::canConvert(runtime, obj.getProperty(runtime, "upVector"))) return false;
      if (!JSIConverter<std::optional<std::tuple<double>>>::canConvert(runtime, obj.getProperty(runtime, "zoomSpeed"))) return false;
      if (!JSIConverter<std::optional<std::tuple<double, double>>>::canConvert(runtime, obj.getProperty(runtime, "orbitSpeed"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
