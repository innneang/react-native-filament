///
/// HybridLightManagerSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "HybridLightManagerSpec.hpp"

namespace margelo::nitro::RNF {

  void HybridLightManagerSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    HybridPointerHolderSpec::loadHybridMethods();
    // load custom methods/properties
    registerHybrids(this, [](Prototype& prototype) {
      prototype.registerHybridMethod("createLightEntity", &HybridLightManagerSpec::createLightEntity);
      prototype.registerHybridMethod("destroy", &HybridLightManagerSpec::destroy);
      prototype.registerHybridMethod("setPosition", &HybridLightManagerSpec::setPosition);
      prototype.registerHybridMethod("getPosition", &HybridLightManagerSpec::getPosition);
      prototype.registerHybridMethod("setDirection", &HybridLightManagerSpec::setDirection);
      prototype.registerHybridMethod("getDirection", &HybridLightManagerSpec::getDirection);
      prototype.registerHybridMethod("setColor", &HybridLightManagerSpec::setColor);
      prototype.registerHybridMethod("getColor", &HybridLightManagerSpec::getColor);
      prototype.registerHybridMethod("setIntensity", &HybridLightManagerSpec::setIntensity);
      prototype.registerHybridMethod("getIntensity", &HybridLightManagerSpec::getIntensity);
      prototype.registerHybridMethod("setFalloff", &HybridLightManagerSpec::setFalloff);
      prototype.registerHybridMethod("getFalloff", &HybridLightManagerSpec::getFalloff);
      prototype.registerHybridMethod("setSpotLightCone", &HybridLightManagerSpec::setSpotLightCone);
      prototype.registerHybridMethod("getSpotLightCone", &HybridLightManagerSpec::getSpotLightCone);
    });
  }

} // namespace margelo::nitro::RNF
