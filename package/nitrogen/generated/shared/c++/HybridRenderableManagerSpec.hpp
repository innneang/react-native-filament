///
/// HybridRenderableManagerSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridEntitySpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridEntitySpec; }
// Forward declaration of `HybridMaterialInstanceSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridMaterialInstanceSpec; }
// Forward declaration of `HybridFilamentAssetSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridFilamentAssetSpec; }
// Forward declaration of `HybridFilamentInstanceSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridFilamentInstanceSpec; }
// Forward declaration of `HybridFilamentBufferSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridFilamentBufferSpec; }
// Forward declaration of `TextureFlags` to properly resolve imports.
namespace margelo::nitro::RNF { enum class TextureFlags; }
// Forward declaration of `HybridMaterialSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridMaterialSpec; }
// Forward declaration of `HybridBoxSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridBoxSpec; }
// Forward declaration of `HybridPointerHolderSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridPointerHolderSpec; }

#include <memory>
#include "HybridEntitySpec.hpp"
#include "HybridMaterialInstanceSpec.hpp"
#include "HybridFilamentAssetSpec.hpp"
#include "HybridFilamentInstanceSpec.hpp"
#include <string>
#include "HybridFilamentBufferSpec.hpp"
#include "TextureFlags.hpp"
#include "HybridMaterialSpec.hpp"
#include <tuple>
#include <optional>
#include "HybridBoxSpec.hpp"
#include <memory>
#include "HybridPointerHolderSpec.hpp"

namespace margelo::nitro::RNF {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `RenderableManager`
   * Inherit this class to create instances of `HybridRenderableManagerSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridRenderableManager: public HybridRenderableManagerSpec {
   * public:
   *   HybridRenderableManager(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridRenderableManagerSpec: public virtual HybridObject, public virtual HybridPointerHolderSpec {
    public:
      // Constructor
      explicit HybridRenderableManagerSpec(): HybridObject(TAG) { }

      // Destructor
      virtual ~HybridRenderableManagerSpec() { }

    public:
      // Properties
      

    public:
      // Methods
      virtual double getPrimitiveCount(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& renderable) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridMaterialInstanceSpec> getMaterialInstanceAt(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& renderable, double index) = 0;
      virtual void setMaterialInstanceAt(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& renderable, double index, const std::shared_ptr<margelo::nitro::RNF::HybridMaterialInstanceSpec>& material) = 0;
      virtual void setAssetEntitiesOpacity(const std::shared_ptr<margelo::nitro::RNF::HybridFilamentAssetSpec>& asset, double opacity) = 0;
      virtual void setInstanceEntitiesOpacity(const std::shared_ptr<margelo::nitro::RNF::HybridFilamentInstanceSpec>& instance, double opacity) = 0;
      virtual void changeMaterialTextureMap(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& renderable, const std::string& materialName, const std::shared_ptr<margelo::nitro::RNF::HybridFilamentBufferSpec>& textureBuffer, TextureFlags textureFlags) = 0;
      virtual void setCastShadow(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& renderable, bool castShadow) = 0;
      virtual void setReceiveShadow(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& renderable, bool receiveShadow) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec> createPlane(const std::shared_ptr<margelo::nitro::RNF::HybridMaterialSpec>& shadowMaterial, double halfExtendX, double halfExtendY, double halfExtendZ) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec> createImageBackgroundShape(const std::shared_ptr<margelo::nitro::RNF::HybridMaterialSpec>& material) = 0;
      virtual void scaleBoundingBox(const std::shared_ptr<margelo::nitro::RNF::HybridFilamentAssetSpec>& asset, double scale) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec> createDebugCubeWireframe(const std::tuple<double, double, double>& halfExtent, const std::optional<std::shared_ptr<margelo::nitro::RNF::HybridMaterialSpec>>& material, std::optional<double> color) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridBoxSpec> getAxisAlignedBoundingBox(const std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>& entity) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "RenderableManager";
  };

} // namespace margelo::nitro::RNF
