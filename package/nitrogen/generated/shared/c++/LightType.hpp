///
/// LightType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::RNF {

  /**
   * An enum which can be represented as a JavaScript union (LightType).
   */
  enum class LightType {
    DIRECTIONAL      SWIFT_NAME(directional) = 0,
    SUN      SWIFT_NAME(sun) = 1,
    POINT      SWIFT_NAME(point) = 2,
    FOCUSED_POINT      SWIFT_NAME(focusedPoint) = 3,
    SPOT      SWIFT_NAME(spot) = 4,
  } CLOSED_ENUM;

} // namespace margelo::nitro::RNF

namespace margelo::nitro {

  using namespace margelo::nitro::RNF;

  // C++ LightType <> JS LightType (union)
  template <>
  struct JSIConverter<LightType> {
    static inline LightType fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("directional"): return LightType::DIRECTIONAL;
        case hashString("sun"): return LightType::SUN;
        case hashString("point"): return LightType::POINT;
        case hashString("focused_point"): return LightType::FOCUSED_POINT;
        case hashString("spot"): return LightType::SPOT;
        default: [[unlikely]]
          throw std::runtime_error("Cannot convert \"" + unionValue + "\" to enum LightType - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, LightType arg) {
      switch (arg) {
        case LightType::DIRECTIONAL: return JSIConverter<std::string>::toJSI(runtime, "directional");
        case LightType::SUN: return JSIConverter<std::string>::toJSI(runtime, "sun");
        case LightType::POINT: return JSIConverter<std::string>::toJSI(runtime, "point");
        case LightType::FOCUSED_POINT: return JSIConverter<std::string>::toJSI(runtime, "focused_point");
        case LightType::SPOT: return JSIConverter<std::string>::toJSI(runtime, "spot");
        default: [[unlikely]]
          throw std::runtime_error("Cannot convert LightType to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("directional"):
        case hashString("sun"):
        case hashString("point"):
        case hashString("focused_point"):
        case hashString("spot"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
