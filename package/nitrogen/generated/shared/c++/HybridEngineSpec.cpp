///
/// HybridEngineSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "HybridEngineSpec.hpp"

namespace margelo::nitro::RNF {

  void HybridEngineSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    HybridPointerHolderSpec::loadHybridMethods();
    // load custom methods/properties
    registerHybrids(this, [](Prototype& prototype) {
      prototype.registerHybridMethod("setSurfaceProvider", &HybridEngineSpec::setSurfaceProvider);
      prototype.registerHybridMethod("createSwapChainForSurface", &HybridEngineSpec::createSwapChainForSurface);
      prototype.registerHybridMethod("createSwapChainForRecorder", &HybridEngineSpec::createSwapChainForRecorder);
      prototype.registerHybridMethod("setSwapChain", &HybridEngineSpec::setSwapChain);
      prototype.registerHybridMethod("loadInstancedAsset", &HybridEngineSpec::loadInstancedAsset);
      prototype.registerHybridMethod("setIndirectLight", &HybridEngineSpec::setIndirectLight);
      prototype.registerHybridMethod("loadAsset", &HybridEngineSpec::loadAsset);
      prototype.registerHybridMethod("createRenderer", &HybridEngineSpec::createRenderer);
      prototype.registerHybridMethod("getScene", &HybridEngineSpec::getScene);
      prototype.registerHybridMethod("getCamera", &HybridEngineSpec::getCamera);
      prototype.registerHybridMethod("getView", &HybridEngineSpec::getView);
      prototype.registerHybridMethod("createOrbitCameraManipulator", &HybridEngineSpec::createOrbitCameraManipulator);
      prototype.registerHybridMethod("createNameComponentManager", &HybridEngineSpec::createNameComponentManager);
      prototype.registerHybridMethod("createTransformManager", &HybridEngineSpec::createTransformManager);
      prototype.registerHybridMethod("createRenderableManager", &HybridEngineSpec::createRenderableManager);
      prototype.registerHybridMethod("createLightManager", &HybridEngineSpec::createLightManager);
      prototype.registerHybridMethod("createMaterial", &HybridEngineSpec::createMaterial);
      prototype.registerHybridMethod("createAndSetSkyboxByColor", &HybridEngineSpec::createAndSetSkyboxByColor);
      prototype.registerHybridMethod("createAndSetSkyboxByTexture", &HybridEngineSpec::createAndSetSkyboxByTexture);
      prototype.registerHybridMethod("clearSkybox", &HybridEngineSpec::clearSkybox);
      prototype.registerHybridMethod("setAutomaticInstancingEnabled", &HybridEngineSpec::setAutomaticInstancingEnabled);
      prototype.registerHybridMethod("flushAndWait", &HybridEngineSpec::flushAndWait);
    });
  }

} // namespace margelo::nitro::RNF
