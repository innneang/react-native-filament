///
/// HybridViewSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridRNFCameraSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridRNFCameraSpec; }
// Forward declaration of `HybridSceneSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridSceneSpec; }
// Forward declaration of `AntiAliasingType` to properly resolve imports.
namespace margelo::nitro::RNF { enum class AntiAliasingType; }
// Forward declaration of `DitheringType` to properly resolve imports.
namespace margelo::nitro::RNF { enum class DitheringType; }
// Forward declaration of `Viewport` to properly resolve imports.
namespace margelo::nitro::RNF { struct Viewport; }
// Forward declaration of `AmbientOcclusionOptions` to properly resolve imports.
namespace margelo::nitro::RNF { struct AmbientOcclusionOptions; }
// Forward declaration of `DynamicResolutionOptions` to properly resolve imports.
namespace margelo::nitro::RNF { struct DynamicResolutionOptions; }
// Forward declaration of `HybridEntitySpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridEntitySpec; }
// Forward declaration of `HybridPointerHolderSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridPointerHolderSpec; }

#include <memory>
#include "HybridRNFCameraSpec.hpp"
#include "HybridSceneSpec.hpp"
#include "AntiAliasingType.hpp"
#include "DitheringType.hpp"
#include <unordered_map>
#include <string>
#include "Viewport.hpp"
#include "AmbientOcclusionOptions.hpp"
#include "DynamicResolutionOptions.hpp"
#include <tuple>
#include <future>
#include <optional>
#include "HybridEntitySpec.hpp"
#include <memory>
#include "HybridPointerHolderSpec.hpp"

namespace margelo::nitro::RNF {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `View`
   * Inherit this class to create instances of `HybridViewSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridView: public HybridViewSpec {
   * public:
   *   HybridView(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridViewSpec: public virtual HybridObject, public virtual HybridPointerHolderSpec {
    public:
      // Constructor
      explicit HybridViewSpec(): HybridObject(TAG) { }

      // Destructor
      virtual ~HybridViewSpec() { }

    public:
      // Properties
      virtual std::shared_ptr<margelo::nitro::RNF::HybridRNFCameraSpec> getCamera() = 0;
      virtual void setCamera(const std::shared_ptr<margelo::nitro::RNF::HybridRNFCameraSpec>& camera) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridSceneSpec> getScene() = 0;
      virtual void setScene(const std::shared_ptr<margelo::nitro::RNF::HybridSceneSpec>& scene) = 0;
      virtual bool getScreenSpaceRefraction() = 0;
      virtual void setScreenSpaceRefraction(bool screenSpaceRefraction) = 0;
      virtual bool getPostProcessing() = 0;
      virtual void setPostProcessing(bool postProcessing) = 0;
      virtual bool getShadowing() = 0;
      virtual void setShadowing(bool shadowing) = 0;
      virtual AntiAliasingType getAntiAliasing() = 0;
      virtual void setAntiAliasing(AntiAliasingType antiAliasing) = 0;
      virtual DitheringType getDithering() = 0;
      virtual void setDithering(DitheringType dithering) = 0;
      virtual std::unordered_map<std::string, double> getTemporalAntiAliasingOptions() = 0;
      virtual void setTemporalAntiAliasingOptions(const std::unordered_map<std::string, double>& temporalAntiAliasingOptions) = 0;

    public:
      // Methods
      virtual double getAspectRatio() = 0;
      virtual Viewport getViewport() = 0;
      virtual void setAmbientOcclusionOptions(const AmbientOcclusionOptions& options) = 0;
      virtual AmbientOcclusionOptions getAmbientOcclusionOptions() = 0;
      virtual void setDynamicResolutionOptions(const DynamicResolutionOptions& options) = 0;
      virtual DynamicResolutionOptions getDynamicResolutionOptions() = 0;
      virtual AmbientOcclusionOptions createAmbientOcclusionOptions() = 0;
      virtual DynamicResolutionOptions createDynamicResolutionOptions() = 0;
      virtual std::tuple<double, double> projectWorldToScreen(const std::tuple<double, double, double>& worldPosition) = 0;
      virtual std::future<std::optional<std::shared_ptr<margelo::nitro::RNF::HybridEntitySpec>>> pickEntity(double x, double y) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "View";
  };

} // namespace margelo::nitro::RNF
