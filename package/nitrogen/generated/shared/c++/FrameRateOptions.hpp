///
/// FrameRateOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <optional>

namespace margelo::nitro::RNF {

  /**
   * A struct which can be represented as a JavaScript object (FrameRateOptions).
   */
  struct FrameRateOptions {
  public:
    std::optional<double> headRoomRatio     SWIFT_PRIVATE;
    std::optional<double> scaleRate     SWIFT_PRIVATE;
    std::optional<double> history     SWIFT_PRIVATE;
    std::optional<double> interval     SWIFT_PRIVATE;

  public:
    explicit FrameRateOptions(std::optional<double> headRoomRatio, std::optional<double> scaleRate, std::optional<double> history, std::optional<double> interval): headRoomRatio(headRoomRatio), scaleRate(scaleRate), history(history), interval(interval) {}
  };

} // namespace margelo::nitro::RNF

namespace margelo::nitro {

  using namespace margelo::nitro::RNF;

  // C++ FrameRateOptions <> JS FrameRateOptions (object)
  template <>
  struct JSIConverter<FrameRateOptions> {
    static inline FrameRateOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return FrameRateOptions(
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "headRoomRatio")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "scaleRate")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "history")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "interval"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const FrameRateOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "headRoomRatio", JSIConverter<std::optional<double>>::toJSI(runtime, arg.headRoomRatio));
      obj.setProperty(runtime, "scaleRate", JSIConverter<std::optional<double>>::toJSI(runtime, arg.scaleRate));
      obj.setProperty(runtime, "history", JSIConverter<std::optional<double>>::toJSI(runtime, arg.history));
      obj.setProperty(runtime, "interval", JSIConverter<std::optional<double>>::toJSI(runtime, arg.interval));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "headRoomRatio"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "scaleRate"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "history"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "interval"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
