///
/// HybridBulletAPISpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridDiscreteDynamicWorldSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridDiscreteDynamicWorldSpec; }
// Forward declaration of `HybridBoxShapeSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridBoxShapeSpec; }
// Forward declaration of `HybridCylinderShapeSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridCylinderShapeSpec; }
// Forward declaration of `HybridStaticPlaneShapeSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridStaticPlaneShapeSpec; }
// Forward declaration of `HybridSphereShapeSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridSphereShapeSpec; }
// Forward declaration of `HybridRigidBodySpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridRigidBodySpec; }
// Forward declaration of `HybridBaseShapeSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridBaseShapeSpec; }
// Forward declaration of `HybridMat4Spec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridMat4Spec; }

#include <memory>
#include "HybridDiscreteDynamicWorldSpec.hpp"
#include "HybridBoxShapeSpec.hpp"
#include "HybridCylinderShapeSpec.hpp"
#include "HybridStaticPlaneShapeSpec.hpp"
#include "HybridSphereShapeSpec.hpp"
#include "HybridRigidBodySpec.hpp"
#include "HybridBaseShapeSpec.hpp"
#include <string>
#include <optional>
#include <functional>
#include "HybridMat4Spec.hpp"

namespace margelo::nitro::RNF {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `BulletAPI`
   * Inherit this class to create instances of `HybridBulletAPISpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridBulletAPI: public HybridBulletAPISpec {
   * public:
   *   HybridBulletAPI(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridBulletAPISpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridBulletAPISpec(): HybridObject(TAG) { }

      // Destructor
      virtual ~HybridBulletAPISpec() { }

    public:
      // Properties
      

    public:
      // Methods
      virtual std::shared_ptr<margelo::nitro::RNF::HybridDiscreteDynamicWorldSpec> createDiscreteDynamicWorld(double gravityX, double gravityY, double gravityZ) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridBoxShapeSpec> createBoxShape(double halfX, double halfY, double halfZ) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridCylinderShapeSpec> createCylinderShape(double halfX, double halfY, double halfZ) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridCylinderShapeSpec> createCylinderShapeX(double halfX, double halfY, double halfZ) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridCylinderShapeSpec> createCylinderShapeZ(double halfX, double halfY, double halfZ) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridStaticPlaneShapeSpec> createStaticPlaneShape(double normalX, double normalY, double normalZ, double constant) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridSphereShapeSpec> createSphereShape(double radius) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridRigidBodySpec> createRigidBody(double mass, double x, double y, double z, const std::shared_ptr<margelo::nitro::RNF::HybridBaseShapeSpec>& shape, const std::string& id, const std::optional<std::function<void(const std::shared_ptr<margelo::nitro::RNF::HybridRigidBodySpec>& /* thisBody */, const std::shared_ptr<margelo::nitro::RNF::HybridRigidBodySpec>& /* collidedWith */)>>& collisionCallback) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridRigidBodySpec> createRigidBodyFromTransform(double mass, const std::shared_ptr<margelo::nitro::RNF::HybridMat4Spec>& transform, const std::shared_ptr<margelo::nitro::RNF::HybridBaseShapeSpec>& shape, const std::string& id, const std::optional<std::function<void(const std::shared_ptr<margelo::nitro::RNF::HybridRigidBodySpec>& /* thisBody */, const std::shared_ptr<margelo::nitro::RNF::HybridRigidBodySpec>& /* collidedWith */)>>& collisionCallback) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "BulletAPI";
  };

} // namespace margelo::nitro::RNF
