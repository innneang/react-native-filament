///
/// FrameInfo.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif





namespace margelo::nitro::RNF {

  /**
   * A struct which can be represented as a JavaScript object (FrameInfo).
   */
  struct FrameInfo {
  public:
    double timestamp     SWIFT_PRIVATE;
    double startTime     SWIFT_PRIVATE;
    double passedSeconds     SWIFT_PRIVATE;
    double timeSinceLastFrame     SWIFT_PRIVATE;

  public:
    explicit FrameInfo(double timestamp, double startTime, double passedSeconds, double timeSinceLastFrame): timestamp(timestamp), startTime(startTime), passedSeconds(passedSeconds), timeSinceLastFrame(timeSinceLastFrame) {}
  };

} // namespace margelo::nitro::RNF

namespace margelo::nitro {

  using namespace margelo::nitro::RNF;

  // C++ FrameInfo <> JS FrameInfo (object)
  template <>
  struct JSIConverter<FrameInfo> {
    static inline FrameInfo fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return FrameInfo(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "timestamp")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "startTime")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "passedSeconds")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "timeSinceLastFrame"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const FrameInfo& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "timestamp", JSIConverter<double>::toJSI(runtime, arg.timestamp));
      obj.setProperty(runtime, "startTime", JSIConverter<double>::toJSI(runtime, arg.startTime));
      obj.setProperty(runtime, "passedSeconds", JSIConverter<double>::toJSI(runtime, arg.passedSeconds));
      obj.setProperty(runtime, "timeSinceLastFrame", JSIConverter<double>::toJSI(runtime, arg.timeSinceLastFrame));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "timestamp"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "startTime"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "passedSeconds"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "timeSinceLastFrame"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
