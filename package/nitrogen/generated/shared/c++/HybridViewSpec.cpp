///
/// HybridViewSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "HybridViewSpec.hpp"

namespace margelo::nitro::RNF {

  void HybridViewSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    HybridPointerHolderSpec::loadHybridMethods();
    // load custom methods/properties
    registerHybrids(this, [](Prototype& prototype) {
      prototype.registerHybridGetter("camera", &HybridViewSpec::getCamera);
      prototype.registerHybridSetter("camera", &HybridViewSpec::setCamera);
      prototype.registerHybridGetter("scene", &HybridViewSpec::getScene);
      prototype.registerHybridSetter("scene", &HybridViewSpec::setScene);
      prototype.registerHybridGetter("screenSpaceRefraction", &HybridViewSpec::getScreenSpaceRefraction);
      prototype.registerHybridSetter("screenSpaceRefraction", &HybridViewSpec::setScreenSpaceRefraction);
      prototype.registerHybridGetter("postProcessing", &HybridViewSpec::getPostProcessing);
      prototype.registerHybridSetter("postProcessing", &HybridViewSpec::setPostProcessing);
      prototype.registerHybridGetter("shadowing", &HybridViewSpec::getShadowing);
      prototype.registerHybridSetter("shadowing", &HybridViewSpec::setShadowing);
      prototype.registerHybridGetter("antiAliasing", &HybridViewSpec::getAntiAliasing);
      prototype.registerHybridSetter("antiAliasing", &HybridViewSpec::setAntiAliasing);
      prototype.registerHybridGetter("dithering", &HybridViewSpec::getDithering);
      prototype.registerHybridSetter("dithering", &HybridViewSpec::setDithering);
      prototype.registerHybridGetter("temporalAntiAliasingOptions", &HybridViewSpec::getTemporalAntiAliasingOptions);
      prototype.registerHybridSetter("temporalAntiAliasingOptions", &HybridViewSpec::setTemporalAntiAliasingOptions);
      prototype.registerHybridMethod("getAspectRatio", &HybridViewSpec::getAspectRatio);
      prototype.registerHybridMethod("getViewport", &HybridViewSpec::getViewport);
      prototype.registerHybridMethod("setAmbientOcclusionOptions", &HybridViewSpec::setAmbientOcclusionOptions);
      prototype.registerHybridMethod("getAmbientOcclusionOptions", &HybridViewSpec::getAmbientOcclusionOptions);
      prototype.registerHybridMethod("setDynamicResolutionOptions", &HybridViewSpec::setDynamicResolutionOptions);
      prototype.registerHybridMethod("getDynamicResolutionOptions", &HybridViewSpec::getDynamicResolutionOptions);
      prototype.registerHybridMethod("createAmbientOcclusionOptions", &HybridViewSpec::createAmbientOcclusionOptions);
      prototype.registerHybridMethod("createDynamicResolutionOptions", &HybridViewSpec::createDynamicResolutionOptions);
      prototype.registerHybridMethod("projectWorldToScreen", &HybridViewSpec::projectWorldToScreen);
      prototype.registerHybridMethod("pickEntity", &HybridViewSpec::pickEntity);
    });
  }

} // namespace margelo::nitro::RNF
