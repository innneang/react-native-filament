///
/// ActivationState.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::RNF {

  /**
   * An enum which can be represented as a JavaScript union (ActivationState).
   */
  enum class ActivationState {
    ACTIVE_STATE      SWIFT_NAME(activeState) = 0,
    ISLAND_SLEEPING      SWIFT_NAME(islandSleeping) = 1,
    WANT_DEACTIVATION      SWIFT_NAME(wantDeactivation) = 2,
    DISABLE_DEACTIVATION      SWIFT_NAME(disableDeactivation) = 3,
    DISABLE_SIMULATION      SWIFT_NAME(disableSimulation) = 4,
  } CLOSED_ENUM;

} // namespace margelo::nitro::RNF

namespace margelo::nitro {

  using namespace margelo::nitro::RNF;

  // C++ ActivationState <> JS ActivationState (union)
  template <>
  struct JSIConverter<ActivationState> {
    static inline ActivationState fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("active_state"): return ActivationState::ACTIVE_STATE;
        case hashString("island_sleeping"): return ActivationState::ISLAND_SLEEPING;
        case hashString("want_deactivation"): return ActivationState::WANT_DEACTIVATION;
        case hashString("disable_deactivation"): return ActivationState::DISABLE_DEACTIVATION;
        case hashString("disable_simulation"): return ActivationState::DISABLE_SIMULATION;
        default: [[unlikely]]
          throw std::runtime_error("Cannot convert \"" + unionValue + "\" to enum ActivationState - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, ActivationState arg) {
      switch (arg) {
        case ActivationState::ACTIVE_STATE: return JSIConverter<std::string>::toJSI(runtime, "active_state");
        case ActivationState::ISLAND_SLEEPING: return JSIConverter<std::string>::toJSI(runtime, "island_sleeping");
        case ActivationState::WANT_DEACTIVATION: return JSIConverter<std::string>::toJSI(runtime, "want_deactivation");
        case ActivationState::DISABLE_DEACTIVATION: return JSIConverter<std::string>::toJSI(runtime, "disable_deactivation");
        case ActivationState::DISABLE_SIMULATION: return JSIConverter<std::string>::toJSI(runtime, "disable_simulation");
        default: [[unlikely]]
          throw std::runtime_error("Cannot convert ActivationState to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("active_state"):
        case hashString("island_sleeping"):
        case hashString("want_deactivation"):
        case hashString("disable_deactivation"):
        case hashString("disable_simulation"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
