///
/// HybridEngineSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `HybridSurfaceProviderSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridSurfaceProviderSpec; }
// Forward declaration of `HybridSwapChainSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridSwapChainSpec; }
// Forward declaration of `HybridTFilamentRecorderSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridTFilamentRecorderSpec; }
// Forward declaration of `HybridFilamentAssetSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridFilamentAssetSpec; }
// Forward declaration of `HybridFilamentBufferSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridFilamentBufferSpec; }
// Forward declaration of `HybridRendererSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridRendererSpec; }
// Forward declaration of `HybridSceneSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridSceneSpec; }
// Forward declaration of `HybridRNFCameraSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridRNFCameraSpec; }
// Forward declaration of `HybridViewSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridViewSpec; }
// Forward declaration of `HybridCameraManipulatorSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridCameraManipulatorSpec; }
// Forward declaration of `OrbitCameraManipulatorConfig` to properly resolve imports.
namespace margelo::nitro::RNF { struct OrbitCameraManipulatorConfig; }
// Forward declaration of `HybridNameComponentManagerSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridNameComponentManagerSpec; }
// Forward declaration of `HybridTransformManagerSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridTransformManagerSpec; }
// Forward declaration of `HybridRenderableManagerSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridRenderableManagerSpec; }
// Forward declaration of `HybridLightManagerSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridLightManagerSpec; }
// Forward declaration of `HybridMaterialSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridMaterialSpec; }
// Forward declaration of `HybridPointerHolderSpec` to properly resolve imports.
namespace margelo::nitro::RNF { class HybridPointerHolderSpec; }

#include <memory>
#include "HybridSurfaceProviderSpec.hpp"
#include "HybridSwapChainSpec.hpp"
#include "HybridTFilamentRecorderSpec.hpp"
#include "HybridFilamentAssetSpec.hpp"
#include "HybridFilamentBufferSpec.hpp"
#include <optional>
#include "HybridRendererSpec.hpp"
#include "HybridSceneSpec.hpp"
#include "HybridRNFCameraSpec.hpp"
#include "HybridViewSpec.hpp"
#include "HybridCameraManipulatorSpec.hpp"
#include "OrbitCameraManipulatorConfig.hpp"
#include "HybridNameComponentManagerSpec.hpp"
#include "HybridTransformManagerSpec.hpp"
#include "HybridRenderableManagerSpec.hpp"
#include "HybridLightManagerSpec.hpp"
#include "HybridMaterialSpec.hpp"
#include <string>
#include <memory>
#include "HybridPointerHolderSpec.hpp"

namespace margelo::nitro::RNF {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `Engine`
   * Inherit this class to create instances of `HybridEngineSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridEngine: public HybridEngineSpec {
   * public:
   *   HybridEngine(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridEngineSpec: public virtual HybridObject, public virtual HybridPointerHolderSpec {
    public:
      // Constructor
      explicit HybridEngineSpec(): HybridObject(TAG) { }

      // Destructor
      virtual ~HybridEngineSpec() { }

    public:
      // Properties
      

    public:
      // Methods
      virtual void setSurfaceProvider(const std::shared_ptr<margelo::nitro::RNF::HybridSurfaceProviderSpec>& surfaceProvider) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridSwapChainSpec> createSwapChainForSurface(const std::shared_ptr<margelo::nitro::RNF::HybridSurfaceProviderSpec>& surface, bool enableTransparentRendering) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridSwapChainSpec> createSwapChainForRecorder(const std::shared_ptr<margelo::nitro::RNF::HybridTFilamentRecorderSpec>& recorder) = 0;
      virtual void setSwapChain(const std::shared_ptr<margelo::nitro::RNF::HybridSwapChainSpec>& swapChain) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridFilamentAssetSpec> loadInstancedAsset(const std::shared_ptr<margelo::nitro::RNF::HybridFilamentBufferSpec>& buffer, double instanceCount) = 0;
      virtual void setIndirectLight(const std::shared_ptr<margelo::nitro::RNF::HybridFilamentBufferSpec>& iblBuffer, std::optional<double> intensity, std::optional<double> irradianceBands) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridFilamentAssetSpec> loadAsset(const std::shared_ptr<margelo::nitro::RNF::HybridFilamentBufferSpec>& buffer) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridRendererSpec> createRenderer() = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridSceneSpec> getScene() = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridRNFCameraSpec> getCamera() = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridViewSpec> getView() = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridCameraManipulatorSpec> createOrbitCameraManipulator(const OrbitCameraManipulatorConfig& config) = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridNameComponentManagerSpec> createNameComponentManager() = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridTransformManagerSpec> createTransformManager() = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridRenderableManagerSpec> createRenderableManager() = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridLightManagerSpec> createLightManager() = 0;
      virtual std::shared_ptr<margelo::nitro::RNF::HybridMaterialSpec> createMaterial(const std::shared_ptr<margelo::nitro::RNF::HybridFilamentBufferSpec>& matcBuffer) = 0;
      virtual void createAndSetSkyboxByColor(const std::string& colorInHex, std::optional<bool> showSun, std::optional<double> envIntensity) = 0;
      virtual void createAndSetSkyboxByTexture(const std::shared_ptr<margelo::nitro::RNF::HybridFilamentBufferSpec>& buffer, std::optional<bool> showSun, std::optional<double> envIntensity) = 0;
      virtual void clearSkybox() = 0;
      virtual void setAutomaticInstancingEnabled(bool enabled) = 0;
      virtual void flushAndWait() = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "Engine";
  };

} // namespace margelo::nitro::RNF
