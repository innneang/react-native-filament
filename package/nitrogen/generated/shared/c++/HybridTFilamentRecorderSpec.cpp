///
/// HybridTFilamentRecorderSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "HybridTFilamentRecorderSpec.hpp"

namespace margelo::nitro::RNF {

  void HybridTFilamentRecorderSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    // load custom methods/properties
    registerHybrids(this, [](Prototype& prototype) {
      prototype.registerHybridGetter("width", &HybridTFilamentRecorderSpec::getWidth);
      prototype.registerHybridSetter("width", &HybridTFilamentRecorderSpec::setWidth);
      prototype.registerHybridGetter("height", &HybridTFilamentRecorderSpec::getHeight);
      prototype.registerHybridSetter("height", &HybridTFilamentRecorderSpec::setHeight);
      prototype.registerHybridGetter("fps", &HybridTFilamentRecorderSpec::getFps);
      prototype.registerHybridSetter("fps", &HybridTFilamentRecorderSpec::setFps);
      prototype.registerHybridGetter("outputFile", &HybridTFilamentRecorderSpec::getOutputFile);
      prototype.registerHybridSetter("outputFile", &HybridTFilamentRecorderSpec::setOutputFile);
      prototype.registerHybridGetter("isRecording", &HybridTFilamentRecorderSpec::getIsRecording);
      prototype.registerHybridSetter("isRecording", &HybridTFilamentRecorderSpec::setIsRecording);
      prototype.registerHybridMethod("startRecording", &HybridTFilamentRecorderSpec::startRecording);
      prototype.registerHybridMethod("stopRecording", &HybridTFilamentRecorderSpec::stopRecording);
      prototype.registerHybridMethod("renderFrame", &HybridTFilamentRecorderSpec::renderFrame);
      prototype.registerHybridMethod("addOnReadyForMoreDataListener", &HybridTFilamentRecorderSpec::addOnReadyForMoreDataListener);
    });
  }

} // namespace margelo::nitro::RNF
